import pandas as pd
import numpy as np # For NaN representation if needed
from ta.trend import (SMAIndicator, EMAIndicator, MACD, ADXIndicator, IchimokuIndicator,
                    PSARIndicator, VortexIndicator, TRIXIndicator, CCIIndicator,
                    KSTIndicator, CoppockCurve, DPOIndicator)
from ta.momentum import (RSIIndicator, StochasticOscillator, WilliamsRIndicator,
                       UltimateOscillator, AwesomeOscillatorIndicator, KAMAIndicator,
                       ROCIndicator, StochRSIIndicator)
from ta.volatility import (BollingerBands, AverageTrueRange, DonchianChannelIndicator)
from ta.volume import (OnBalanceVolumeIndicator, MoneyFlowIndexIndicator,
                     ChaikinMoneyFlowIndicator, ForceIndexIndicator, EaseOfMovementIndicator)
# from ta.others import DailyReturnIndicator, CumulativeReturnIndicator # Example, not strictly 'features' for ML input usually

from src.data_loader import download_stock_data # For example usage

def add_technical_indicators(data: pd.DataFrame, fillna: bool = True) -> pd.DataFrame:
    """
    Adds a comprehensive set of technical indicators to the stock data DataFrame.

    Args:
        data: A pandas DataFrame with stock data. 
              For multi-ticker data, expects 'Ticker' as the first level of a MultiIndex.
              Requires 'High', 'Low', 'Close', 'Volume' columns.
        fillna: If True, fills NaN values generated by indicators.

    Returns:
        A pandas DataFrame with the added technical indicator columns.
    """
    
    if not isinstance(data.index, pd.MultiIndex):
        # Single ticker DataFrame
        df = data.copy()
        
        # Original Indicators
        df['SMA_20'] = SMAIndicator(close=df['Close'], window=20, fillna=fillna).sma_indicator()
        df['EMA_20'] = EMAIndicator(close=df['Close'], window=20, fillna=fillna).ema_indicator()
        df['RSI_14'] = RSIIndicator(close=df['Close'], window=14, fillna=fillna).rsi()
        macd = MACD(close=df['Close'], fillna=fillna)
        df['MACD'] = macd.macd()
        df['MACD_signal'] = macd.macd_signal()
        df['MACD_diff'] = macd.macd_diff()
        bb = BollingerBands(close=df['Close'], window=20, window_dev=2, fillna=fillna)
        df['BB_high'] = bb.bollinger_hband()
        df['BB_low'] = bb.bollinger_lband()
        df['BB_middle'] = bb.bollinger_mavg()

        # Volatility
        df['ATR_14'] = AverageTrueRange(high=df['High'], low=df['Low'], close=df['Close'], window=14, fillna=fillna).average_true_range()
        dc = DonchianChannelIndicator(high=df['High'], low=df['Low'], close=df['Close'], window=20, offset=0, fillna=fillna)
        df['DC_high'] = dc.donchian_channel_hband()
        df['DC_low'] = dc.donchian_channel_lband()
        df['DC_middle'] = dc.donchian_channel_mband()

        # Momentum
        stoch = StochasticOscillator(high=df['High'], low=df['Low'], close=df['Close'], window=14, smooth_window=3, fillna=fillna)
        df['Stoch_k'] = stoch.stoch()
        df['Stoch_d'] = stoch.stoch_signal()
        df['WilliamsR_14'] = WilliamsRIndicator(high=df['High'], low=df['Low'], close=df['Close'], lbp=14, fillna=fillna).williams_r()
        df['Ultimate_Osc'] = UltimateOscillator(high=df['High'], low=df['Low'], close=df['Close'], fillna=fillna).ultimate_oscillator()
        df['Awesome_Osc'] = AwesomeOscillatorIndicator(high=df['High'], low=df['Low'], fillna=fillna).awesome_oscillator()
        df['KAMA_10_2_30'] = KAMAIndicator(close=df['Close'], window=10, pow1=2, pow2=30, fillna=fillna).kama() # Default params
        df['ROC_12'] = ROCIndicator(close=df['Close'], window=12, fillna=fillna).roc()
        stoch_rsi = StochRSIIndicator(close=df['Close'], window=14, smooth1=3, smooth2=3, fillna=fillna) # Default params for smooth1, smooth2
        df['StochRSI_k'] = stoch_rsi.stochrsi_k()
        df['StochRSI_d'] = stoch_rsi.stochrsi_d()
        
        # Volume
        df['OBV'] = OnBalanceVolumeIndicator(close=df['Close'], volume=df['Volume'], fillna=fillna).on_balance_volume()
        df['MFI_14'] = MoneyFlowIndexIndicator(high=df['High'], low=df['Low'], close=df['Close'], volume=df['Volume'], window=14, fillna=fillna).money_flow_index()
        df['CMF_20'] = ChaikinMoneyFlowIndicator(high=df['High'], low=df['Low'], close=df['Close'], volume=df['Volume'], window=20, fillna=fillna).chaikin_money_flow()
        df['ForceIdx_13'] = ForceIndexIndicator(close=df['Close'], volume=df['Volume'], window=13, fillna=fillna).force_index()
        df['EOM_14'] = EaseOfMovementIndicator(high=df['High'], low=df['Low'], volume=df['Volume'], window=14, fillna=fillna).ease_of_movement()

        # Trend
        adx_indicator = ADXIndicator(high=df['High'], low=df['Low'], close=df['Close'], window=14, fillna=fillna)
        df['ADX_14'] = adx_indicator.adx()
        df['ADX_pos_14'] = adx_indicator.adx_pos()
        df['ADX_neg_14'] = adx_indicator.adx_neg()
        ichimoku = IchimokuIndicator(high=df['High'], low=df['Low'], window1=9, window2=26, window3=52, visual=False, fillna=fillna)
        df['Ichimoku_A'] = ichimoku.ichimoku_a()
        df['Ichimoku_B'] = ichimoku.ichimoku_b()
        df['Ichimoku_Kijun'] = ichimoku.ichimoku_kijun_sen()
        df['Ichimoku_Tenkan'] = ichimoku.ichimoku_tenkan_sen()
        # df['Ichimoku_Chikou'] = ichimoku.ichimoku_chickou_span() # This is just shifted close, might not be useful as feature
        df['PSAR_up'] = PSARIndicator(high=df['High'], low=df['Low'], close=df['Close'], fillna=fillna).psar_up()
        df['PSAR_down'] = PSARIndicator(high=df['High'], low=df['Low'], close=df['Close'], fillna=fillna).psar_down()
        # df['PSAR_ind'] = PSARIndicator(high=df['High'], low=df['Low'], close=df['Close'], fillna=fillna).psar() # up/down are usually more direct
        vortex = VortexIndicator(high=df['High'], low=df['Low'], close=df['Close'], window=14, fillna=fillna)
        df['Vortex_pos_14'] = vortex.vortex_indicator_pos()
        df['Vortex_neg_14'] = vortex.vortex_indicator_neg()
        df['TRIX_15'] = TRIXIndicator(close=df['Close'], window=15, fillna=fillna).trix()
        df['CCI_20'] = CCIIndicator(high=df['High'], low=df['Low'], close=df['Close'], window=20, constant=0.015, fillna=fillna).cci()
        kst = KSTIndicator(close=df['Close'], fillna=fillna) # Default params
        df['KST'] = kst.kst()
        df['KST_sig'] = kst.kst_sig()
        df['Coppock_10_11_14'] = CoppockCurve(close=df['Close'],wma_window=10, roc1_window=11, roc2_window=14, fillna=fillna).coppock() # Common params
        df['DPO_20'] = DPOIndicator(close=df['Close'], window=20, fillna=fillna).dpo()
        
        return df
        
    else:
        # Multi-ticker DataFrame
        indicator_groups = []
        for ticker, group_data in data.groupby(level='Ticker'):
            df_group = group_data.copy()
            # Original Indicators
            df_group['SMA_20'] = SMAIndicator(close=df_group['Close'], window=20, fillna=fillna).sma_indicator()
            df_group['EMA_20'] = EMAIndicator(close=df_group['Close'], window=20, fillna=fillna).ema_indicator()
            df_group['RSI_14'] = RSIIndicator(close=df_group['Close'], window=14, fillna=fillna).rsi()
            macd = MACD(close=df_group['Close'], fillna=fillna)
            df_group['MACD'] = macd.macd()
            df_group['MACD_signal'] = macd.macd_signal()
            df_group['MACD_diff'] = macd.macd_diff()
            bb = BollingerBands(close=df_group['Close'], window=20, window_dev=2, fillna=fillna)
            df_group['BB_high'] = bb.bollinger_hband()
            df_group['BB_low'] = bb.bollinger_lband()
            df_group['BB_middle'] = bb.bollinger_mavg()

            # Volatility
            df_group['ATR_14'] = AverageTrueRange(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], window=14, fillna=fillna).average_true_range()
            dc = DonchianChannelIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], window=20, offset=0, fillna=fillna)
            df_group['DC_high'] = dc.donchian_channel_hband()
            df_group['DC_low'] = dc.donchian_channel_lband()
            df_group['DC_middle'] = dc.donchian_channel_mband()

            # Momentum
            stoch = StochasticOscillator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], window=14, smooth_window=3, fillna=fillna)
            df_group['Stoch_k'] = stoch.stoch()
            df_group['Stoch_d'] = stoch.stoch_signal()
            df_group['WilliamsR_14'] = WilliamsRIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], lbp=14, fillna=fillna).williams_r()
            df_group['Ultimate_Osc'] = UltimateOscillator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], fillna=fillna).ultimate_oscillator()
            df_group['Awesome_Osc'] = AwesomeOscillatorIndicator(high=df_group['High'], low=df_group['Low'], fillna=fillna).awesome_oscillator()
            df_group['KAMA_10_2_30'] = KAMAIndicator(close=df_group['Close'], window=10, pow1=2, pow2=30, fillna=fillna).kama()
            df_group['ROC_12'] = ROCIndicator(close=df_group['Close'], window=12, fillna=fillna).roc()
            stoch_rsi = StochRSIIndicator(close=df_group['Close'], window=14, smooth1=3, smooth2=3, fillna=fillna)
            df_group['StochRSI_k'] = stoch_rsi.stochrsi_k()
            df_group['StochRSI_d'] = stoch_rsi.stochrsi_d()

            # Volume
            df_group['OBV'] = OnBalanceVolumeIndicator(close=df_group['Close'], volume=df_group['Volume'], fillna=fillna).on_balance_volume()
            df_group['MFI_14'] = MoneyFlowIndexIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], volume=df_group['Volume'], window=14, fillna=fillna).money_flow_index()
            df_group['CMF_20'] = ChaikinMoneyFlowIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], volume=df_group['Volume'], window=20, fillna=fillna).chaikin_money_flow()
            df_group['ForceIdx_13'] = ForceIndexIndicator(close=df_group['Close'], volume=df_group['Volume'], window=13, fillna=fillna).force_index()
            df_group['EOM_14'] = EaseOfMovementIndicator(high=df_group['High'], low=df_group['Low'], volume=df_group['Volume'], window=14, fillna=fillna).ease_of_movement()

            # Trend
            adx_indicator = ADXIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], window=14, fillna=fillna)
            df_group['ADX_14'] = adx_indicator.adx()
            df_group['ADX_pos_14'] = adx_indicator.adx_pos()
            df_group['ADX_neg_14'] = adx_indicator.adx_neg()
            ichimoku = IchimokuIndicator(high=df_group['High'], low=df_group['Low'], window1=9, window2=26, window3=52, visual=False, fillna=fillna)
            df_group['Ichimoku_A'] = ichimoku.ichimoku_a()
            df_group['Ichimoku_B'] = ichimoku.ichimoku_b()
            df_group['Ichimoku_Kijun'] = ichimoku.ichimoku_kijun_sen()
            df_group['Ichimoku_Tenkan'] = ichimoku.ichimoku_tenkan_sen()
            df_group['PSAR_up'] = PSARIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], fillna=fillna).psar_up()
            df_group['PSAR_down'] = PSARIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], fillna=fillna).psar_down()
            vortex = VortexIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], window=14, fillna=fillna)
            df_group['Vortex_pos_14'] = vortex.vortex_indicator_pos()
            df_group['Vortex_neg_14'] = vortex.vortex_indicator_neg()
            df_group['TRIX_15'] = TRIXIndicator(close=df_group['Close'], window=15, fillna=fillna).trix()
            df_group['CCI_20'] = CCIIndicator(high=df_group['High'], low=df_group['Low'], close=df_group['Close'], window=20, constant=0.015, fillna=fillna).cci()
            kst = KSTIndicator(close=df_group['Close'], fillna=fillna)
            df_group['KST'] = kst.kst()
            df_group['KST_sig'] = kst.kst_sig()
            df_group['Coppock_10_11_14'] = CoppockCurve(close=df_group['Close'],wma_window=10, roc1_window=11, roc2_window=14, fillna=fillna).coppock()
            df_group['DPO_20'] = DPOIndicator(close=df_group['Close'], window=20, fillna=fillna).dpo()
            
            indicator_groups.append(df_group)
        
        df_with_indicators = pd.concat(indicator_groups)
        return df_with_indicators


def add_rolling_lag_features(data: pd.DataFrame, windows: list[int] = None, lags: list[int] = None, 
                             lag_indicators: list[str] = None) -> pd.DataFrame:
    """
    Adds rolling window features and lag features to the DataFrame.

    Args:
        data: Input pandas DataFrame. For multi-ticker data, expects 'Ticker' 
              as the first level of a MultiIndex. Requires 'Close', 'Volume' columns.
              If lag_indicators are specified, those columns must also be present.
        windows: List of window sizes for rolling features (e.g., [5, 10, 20]).
        lags: List of lag periods for lag features (e.g., [1, 2, 3, 5]).
        lag_indicators: List of column names of technical indicators to lag 
                        (e.g., ['RSI_14', 'MACD']).

    Returns:
        DataFrame with added rolling and lag features.
    """
    if windows is None:
        windows = [5, 10, 20]
    if lags is None:
        lags = [1, 2, 3, 5]
    if lag_indicators is None:
        lag_indicators = ['RSI_14', 'MACD'] # Default key indicators to lag

    df_featured = data.copy()

    if not isinstance(df_featured.index, pd.MultiIndex):
        # Single ticker DataFrame
        for window in windows:
            df_featured[f'Close_rol_mean_{window}'] = df_featured['Close'].rolling(window=window).mean()
            df_featured[f'Close_rol_std_{window}'] = df_featured['Close'].rolling(window=window).std()
            if 'Volume' in df_featured.columns:
                 df_featured[f'Volume_rol_mean_{window}'] = df_featured['Volume'].rolling(window=window).mean()

        for lag in lags:
            df_featured[f'Close_lag_{lag}'] = df_featured['Close'].shift(lag)
            for indicator_col in lag_indicators:
                if indicator_col in df_featured.columns:
                    df_featured[f'{indicator_col}_lag_{lag}'] = df_featured[indicator_col].shift(lag)
    else:
        # Multi-ticker DataFrame
        processed_groups = []
        for ticker, group_data in df_featured.groupby(level='Ticker'):
            group_copy = group_data.copy()
            for window in windows:
                group_copy[f'Close_rol_mean_{window}'] = group_copy['Close'].rolling(window=window).mean()
                group_copy[f'Close_rol_std_{window}'] = group_copy['Close'].rolling(window=window).std()
                if 'Volume' in group_copy.columns:
                    group_copy[f'Volume_rol_mean_{window}'] = group_copy['Volume'].rolling(window=window).mean()
            
            for lag in lags:
                group_copy[f'Close_lag_{lag}'] = group_copy['Close'].shift(lag)
                for indicator_col in lag_indicators:
                    if indicator_col in group_copy.columns:
                         group_copy[f'{indicator_col}_lag_{lag}'] = group_copy[indicator_col].shift(lag)
            processed_groups.append(group_copy)
        df_featured = pd.concat(processed_groups)
        
    return df_featured


def create_target_variable(df: pd.DataFrame, future_days: int, percent_change_threshold: float) -> pd.DataFrame:
    """
    Creates a target variable based on future price changes.

    Args:
        df: Input pandas DataFrame with 'Close' prices. 
            For multi-ticker data, expects 'Ticker' as the first level of a MultiIndex.
        future_days: Number of days to look into the future for price change.
        percent_change_threshold: Minimum percentage change (e.g., 0.05 for 5%) 
                                  for a signal.

    Returns:
        DataFrame with an added 'target' column.
    """
    data_with_target = df.copy()

    if not isinstance(data_with_target.index, pd.MultiIndex):
        # Single ticker DataFrame
        data_with_target['future_close'] = data_with_target['Close'].shift(-future_days)
        data_with_target['price_change_pct'] = (data_with_target['future_close'] - data_with_target['Close']) / data_with_target['Close']
        
        data_with_target['target'] = 0
        data_with_target.loc[data_with_target['price_change_pct'] > percent_change_threshold, 'target'] = 1
        data_with_target.loc[data_with_target['price_change_pct'] < -percent_change_threshold, 'target'] = 1

        data_with_target.drop(columns=['future_close', 'price_change_pct'], inplace=True)

    else:
        # Multi-ticker DataFrame
        all_tickers_target = []
        for ticker, group_data in data_with_target.groupby(level='Ticker'):
            group_copy = group_data.copy()
            group_copy['future_close'] = group_copy['Close'].shift(-future_days)
            group_copy['price_change_pct'] = (group_copy['future_close'] - group_copy['Close']) / group_copy['Close']
            
            group_copy['target'] = 0
            group_copy.loc[group_copy['price_change_pct'] > percent_change_threshold, 'target'] = 1
            group_copy.loc[group_copy['price_change_pct'] < -percent_change_threshold, 'target'] = 1
            
            group_copy.drop(columns=['future_close', 'price_change_pct'], inplace=True)
            all_tickers_target.append(group_copy)
        
        data_with_target = pd.concat(all_tickers_target)
        
    return data_with_target

if __name__ == '__main__':
    # Example Usage
    tickers_example = ['AAPL', 'MSFT']
    start_date_example = '2023-01-01'
    end_date_example = '2023-07-31' # Extended for more data points for lags/rolling

    # 1. Download data
    raw_data_example = download_stock_data(tickers_example, start_date_example, end_date_example)

    if raw_data_example is not None:
        print(f"--- Downloaded Data ({tickers_example}) ---")
        print(raw_data_example.head())

        # 2. Add comprehensive technical indicators
        data_with_ti = add_technical_indicators(raw_data_example.copy(), fillna=True)
        print(f"\n--- Data with Technical Indicators ({tickers_example}) ---")
        # print(data_with_ti.head())
        print(f"Number of columns after adding TIs: {len(data_with_ti.columns)}")
        print("Sample TI columns (AAPL):")
        if 'AAPL' in data_with_ti.index.get_level_values('Ticker'):
            print(data_with_ti.loc['AAPL'][['SMA_20', 'RSI_14', 'ATR_14', 'Stoch_k', 'OBV', 'ADX_14', 'Ichimoku_A']].head())
        
        # 3. Add rolling and lag features
        # Define specific indicators from the TI set to lag
        key_lag_indicators = ['RSI_14', 'MACD', 'ATR_14', 'Stoch_k', 'ADX_14'] 
        data_with_roll_lag = add_rolling_lag_features(
            data_with_ti.copy(), 
            windows=[5, 10, 20, 60], 
            lags=[1, 2, 3, 5, 10],
            lag_indicators=key_lag_indicators
        )
        print(f"\n--- Data with Rolling/Lag Features ({tickers_example}) ---")
        # print(data_with_roll_lag.head())
        print(f"Number of columns after adding rolling/lag features: {len(data_with_roll_lag.columns)}")
        print("Sample Rolling/Lag columns (AAPL):")
        if 'AAPL' in data_with_roll_lag.index.get_level_values('Ticker'):
            sample_roll_lag_cols = [col for col in data_with_roll_lag.columns if 'rol_mean' in col or 'lag_1' in col]
            print(data_with_roll_lag.loc['AAPL'][sample_roll_lag_cols].head())
            print(data_with_roll_lag.loc['AAPL'][sample_roll_lag_cols].tail()) # Check NaNs

        # 4. Create target variable (example)
        data_with_target = create_target_variable(data_with_roll_lag.copy(), future_days=5, percent_change_threshold=0.03)
        print(f"\n--- Data with Target Variable ({tickers_example}) ---")
        # print(data_with_target.head())
        print(f"Number of columns after adding target: {len(data_with_target.columns)}")
        if 'AAPL' in data_with_target.index.get_level_values('Ticker'):
            print(data_with_target.loc['AAPL'][['Close', 'target'] + [col for col in data_with_target.columns if 'Close_lag' in col]].tail(10))

        print("\n--- Example for Single Ticker (NVDA) ---")
        single_ticker_example = ['NVDA']
        raw_single = download_stock_data(single_ticker_example, start_date_example, end_date_example)
        if raw_single is not None:
            single_with_ti = add_technical_indicators(raw_single.copy())
            single_with_roll_lag = add_rolling_lag_features(single_with_ti.copy(), lag_indicators=['RSI_14']) # Test with fewer lags for brevity
            single_with_target = create_target_variable(single_with_roll_lag.copy(), 5, 0.03)
            print(f"NVDA data processed. Final columns: {len(single_with_target.columns)}")
            print(single_with_target[['Close', 'RSI_14', 'RSI_14_lag_1', 'Close_rol_mean_5', 'target']].head())
            print(single_with_target[['Close', 'RSI_14', 'RSI_14_lag_1', 'Close_rol_mean_5', 'target']].tail())
    else:
        print("Failed to download example data.")
